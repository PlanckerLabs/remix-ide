msgid ""
msgstr ""
"Project-Id-Version: remix-translation\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-07-24 17:10+0200\n"
"PO-Revision-Date: 2023-09-07 18:12\n"
"Last-Translator: \n"
"Language-Team: Italian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: remix-translation\n"
"X-Crowdin-Project-ID: 431830\n"
"X-Crowdin-Language: it\n"
"X-Crowdin-File: /[ethereum.remix-ide] master/docs/_build/gettext/unittesting_examples.pot\n"
"X-Crowdin-File-ID: 6508\n"
"Language: it_IT\n"

#: ../../unittesting_examples.md:1
msgid "Testing by Example"
msgstr "Testing by Example"

#: ../../unittesting_examples.md:4
msgid "Here are some examples which can give you better understanding to plan your tests."
msgstr "Ecco alcuni esempi che possono farvi comprendere meglio come pianificare i vostri test."

#: ../../unittesting_examples.md:6
msgid "**Note:** Examples in this section are intended to give you a push for development. We don't recommend to rely on them without verifying at your end."
msgstr "**Nota:** Gli esempi di questa sezione hanno lo scopo di fornire una spinta allo sviluppo. È sconsigliato fare affidamento su di essi senza averli verificati."

#: ../../unittesting_examples.md:8
msgid "1. Simple example"
msgstr "1. Esempio semplice"

#: ../../unittesting_examples.md:9
msgid "In this example, we test setting & getting variables."
msgstr "In questo esempio, testiamo l'impostazione e l'ottenimento delle variabili."

#: ../../unittesting_examples.md:11
msgid "Contract/Program to be tested: `Simple_storage.sol`"
msgstr "Contratto/Programma da testare: `Simple_storage.sol`"

#: ../../unittesting_examples.md:32
msgid "Test contract/program: `simple_storage_test.sol`"
msgstr "Test del contratto/programma: `simple_storage_test.sol`"

#: ../../unittesting_examples.md:60
msgid "2. Testing a method involving `msg.sender`"
msgstr "2. Testare un metodo che coinvolga `msg.sender`"

#: ../../unittesting_examples.md:61
msgid "In Solidity, `msg.sender` plays a great role in access management of a smart contract methods interaction. Different `msg.sender` can help to test a contract involving multiple accounts with different roles. Here is an example for testing such case:"
msgstr "In Solidity, `msg.sender` svolge un ruolo importante nella gestione dell'accesso ai metodi di interazione di un contratto intelligente. Diversi `msg.sender` possono aiutare a testare un contratto che coinvolge più account con ruoli diversi. Ecco un esempio per testare questo scenario:"

#: ../../unittesting_examples.md:63
msgid "Contract/Program to be tested: `Sender.sol`"
msgstr "Contratto/programma da testare: `Sender.sol"

#: ../../unittesting_examples.md:85
msgid "Test contract/program: `Sender_test.sol`"
msgstr "Test del contratto/programma: `Sender_test.sol`"

#: ../../unittesting_examples.md:137
msgid "3. Testing method execution"
msgstr "3. Testare il metodo esecuzione"

#: ../../unittesting_examples.md:139
msgid "With Solidity, one can directly verify the changes made by a method in storage by retrieving those variables from a contract. But testing for a successful method execution takes some strategy. Well that is not entirely true, when a test is successful - it is usually obvious why it passed. However, when a test fails, it is essential to understand why it failed."
msgstr "Con Solidity, si possono verificare direttamente le modifiche apportate da un metodo in memoria, recuperando le variabili da un contratto. Ma verificare che l'esecuzione di un metodo abbia successo richiede una certa strategia. Bene, questo non è del tutto vero: quando un test ha successo, di solito è ovvio il motivo per cui è stato superato. Tuttavia, quando un test fallisce, è essenziale capire perché è fallito."

#: ../../unittesting_examples.md:141
msgid "To help in such cases, Solidity introduced the `try-catch` statement in version `0.6.0`. Previously, we had to use low-level calls to track down what was going on."
msgstr "Per aiutare in questi casi, Solidity ha introdotto l'istruzione `try-catch` nella versione `0.6.0`. In precedenza, dovevamo usare chiamate di basso livello per capire cosa stesse succedendo."

#: ../../unittesting_examples.md:143
msgid "Here is an example test file that use both **try-catch** blocks and **low level calls**:"
msgstr "Ecco un esempio di file di test che utilizza sia blocchi **try-catch** che **chiamate di basso livello**:"

#: ../../unittesting_examples.md:145
msgid "Contract/Program to be tested: `AttendanceRegister.sol`"
msgstr "Contratto/programma da testare: `AttendanceRegister.sol"

#: ../../unittesting_examples.md:174
msgid "Test contract/program: `AttendanceRegister_test.sol`"
msgstr "Test del contratto/programma: `AttendanceRegister_test.sol`"

#: ../../unittesting_examples.md:262
msgid "4. Testing a method involving `msg.value`"
msgstr "4. Testare un metodo che coinvolga `msg.value"

#: ../../unittesting_examples.md:263
msgid "In Solidity, ether can be passed along with a method call which is accessed inside contract as `msg.value`. Sometimes, multiple calculations in a method are performed based on `msg.value` which can be tested with various values using Remix's Custom transaction context. See the example:"
msgstr "In Solidity, gli ether possono essere passati insieme a una chiamata di metodo, a cui si accede all'interno del contratto come `msg.value`. A volte, calcoli multipli in un metodo vengono eseguiti sulla base di `msg.value`, che può essere testato con vari valori usando il contesto di transazione personalizzato di Remix. Si veda l'esempio:"

#: ../../unittesting_examples.md:265
msgid "Contract/Program to be tested: `Value.sol`"
msgstr "Contratto/programma da testare: `Valore.sol"

#: ../../unittesting_examples.md:285
msgid "Test contract/program: `Value_test.sol`"
msgstr "Test del contratto/programma: `Value_test.sol`"

#: ../../unittesting_examples.md:331
msgid "5. Testing a method involving `msg.sender` and `msg.value`"
msgstr "5. Testare un metodo che coinvolga `msg.sender` e `msg.value`"

#: ../../unittesting_examples.md:332
msgid "In the following test, we will be emulating multiple accounts making deposits in a smart contract to the same recipient and finally having the recipient withdraw the lump sum of all donations. We are also verifying that the donations match the expected amounts. This example really drives home how could you switch between different accounts, while using a set of different msg.value amounts."
msgstr "Nel test seguente, simuleremo più account che effettuano depositi in un contratto intelligente ad uno stesso destinatario ed infine avremo il destinatario che preleverà l'importo forfettario di tutte le donazioni. Verificheremo inoltre che le donazioni corrispondano agli importi previsti. Questo esempio illustra bene come si possa passare da un account ad un altro, utilizzando un insieme di diversi importi di msg.value."

#: ../../unittesting_examples.md:334
msgid "Contract/Program to be tested: `Donations.sol`"
msgstr "Contratto/programma da testare: `Donations.sol`"

#: ../../unittesting_examples.md:379
msgid "Test contract/program: `Donations_test.sol`"
msgstr "Test del contratto/programma: `Donations_test.sol`"

